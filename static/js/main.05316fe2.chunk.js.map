{"version":3,"sources":["serviceWorker.js","Form.js","index.js"],"names":["Boolean","window","location","hostname","match","Form","state","fields","errors","handleChange","bind","submitForm","e","this","target","name","value","setState","preventDefault","validateForm","alert","console","log","formValid","RegExp","test","feedback","length","className","action","method","onSubmit","htmlFor","type","placeholder","email","onChange","rows","cols","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCwFSC,G,kBArGd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZC,OAAQ,GACRC,OAAQ,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBARN,E,0EAWAE,GACZ,IAAIL,EAASM,KAAKP,MAAMC,OACxBA,EAAOK,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,MACjCH,KAAKI,SAAU,CACdV,OAAQA,M,iCAKCK,GAEV,GADAA,EAAEM,iBACEL,KAAKM,eAAgB,CACxB,IAAIZ,EAAS,CACbA,MAAkB,GAClBA,SAAqB,IACrBM,KAAKI,SAAS,CAACV,OAAOA,IACtBa,MAAM,yB,qCAKP,IAAIb,EAASM,KAAKP,MAAMC,OACxBc,QAAQC,MACR,IAAId,EAAS,GACTe,GAAY,GAEXhB,EAAM,QACVgB,GAAY,EACZf,EAAM,MAAY,sCAGY,qBAApBD,EAAM,SACF,IAAIiB,OAAO,mSACNC,KAAKlB,EAAM,SACrBgB,GAAY,EACZf,EAAM,MAAY,0CA0B5B,OAtBKD,EAAOmB,WACXH,GAAY,EACZf,EAAM,SAAe,iCAGlBD,EAAOmB,UAAYnB,EAAOmB,SAASC,OAAS,GAAKpB,EAAOmB,SAASC,OAAS,KAE7EJ,GAAY,EACZf,EAAM,SAAe,2DAGlBD,EAAOmB,UAAYnB,EAAOmB,SAASC,OAAS,MAC/CJ,GAAY,EACZf,EAAM,SAAe,wCAKtBK,KAAKI,SAAS,CACbT,OAAQA,IAGFe,I,+BAMP,OAEC,0BAAMK,UAAU,WAAWC,OAAO,8BAA8BC,OAAO,OAAOC,SAAWlB,KAAKF,YAC7F,4CACA,4GACA,2BAAOqB,QAAQ,SAAf,SACA,2BAAOC,KAAK,QAAQlB,KAAK,QAAQa,UAAU,QAAQM,YAAY,qBAAqBlB,MAAQH,KAAKP,MAAMC,OAAO4B,MAAOC,SAAUvB,KAAKJ,eACnII,KAAKP,MAAME,OAAO2B,OAClB,yBAAKP,UAAU,SAASf,KAAKP,MAAME,OAAO2B,OAE3C,2BAAOH,QAAQ,YAAf,WACA,8BAAUjB,KAAK,WAAWa,UAAU,UAAUS,KAAK,IAAIC,KAAK,KAAKJ,YAAY,UAAUlB,MAAQH,KAAKP,MAAMC,OAAOmB,SAAUU,SAAUvB,KAAKJ,eACzII,KAAKP,MAAME,OAAOkB,UAClB,yBAAKE,UAAU,SAASf,KAAKP,MAAME,OAAOkB,UAE3C,2BAAOO,KAAK,SAASL,UAAU,SAAUZ,MAAM,gB,GA9FhCuB,c,MCInBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SF2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.05316fe2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport './Form.css';\r\n\r\n\r\nclass Form extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tfields: {},\r\n\t\t\terrors: {}\r\n\t\t}\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.submitForm = this.submitForm.bind(this);\r\n\t};\r\n\r\n\thandleChange(e) {\r\n\t\tlet fields = this.state.fields;\r\n\t\tfields[e.target.name] = e.target.value;\r\n\t\tthis.setState ({\r\n\t\t\tfields: fields\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tsubmitForm(e) {\r\n\t\te.preventDefault();\r\n\t\tif (this.validateForm()) {\r\n\t\t\tlet fields = {};\r\n\t\t\tfields['email'] = '';\r\n\t\t\tfields['feedback'] = '';\r\n\t\t\tthis.setState({fields:fields});\r\n\t\t\talert('Feedback submitted');\r\n\t\t}\r\n\t}\r\n\r\n\tvalidateForm() {\r\n\t\tlet fields = this.state.fields;\r\n\t\tconsole.log()\r\n\t\tlet errors = {};\r\n\t\tlet formValid = true;\r\n\r\n\t\tif (!fields['email']) {\r\n\t\t\tformValid = false;\r\n\t\t\terrors['email'] = '* Please enter your email address.';\r\n\t\t}\r\n\r\n\t\tif (typeof fields['email'] !== 'undefined') {\r\n\t\t\tlet pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n\t        if (!pattern.test(fields['email'])) {\r\n\t\t          formValid = false;\r\n\t\t          errors[\"email\"] = \"* Please enter a valid email address.\";\r\n\t\t      }\r\n\t\t}\r\n\r\n\t\tif (!fields.feedback) {\r\n\t\t\tformValid = false;\r\n\t\t\terrors['feedback'] = '* Please enter your feedback.';\r\n\t\t};\r\n\r\n\t\tif (fields.feedback && fields.feedback.length > 0 && fields.feedback.length < 10){\r\n\r\n\t\t\tformValid = false;\r\n\t\t\terrors['feedback'] = '* Feedback message must contain at least 10 characters.';\r\n\t\t}\r\n\r\n\t\tif (fields.feedback && fields.feedback.length > 200) {\r\n\t\t\tformValid = false;\r\n\t\t\terrors['feedback'] = '* Maximum amount of characters: 200.';\r\n\t\t}\r\n\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\terrors: errors\r\n\t\t});\r\n\r\n\t\treturn formValid;\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<form className=\"feedback\" action=\"https://choicy.com/feedback\" method=\"post\" onSubmit= {this.submitForm}>\r\n\t\t\t\t<h1>Get in Touch</h1>\r\n\t\t\t\t<p>Please fill out the quick form and we will be in touch with lightening speed.</p>\r\n\t\t\t\t<label htmlFor=\"email\">Email</label>\r\n\t\t\t\t<input type=\"email\" name=\"email\" className=\"email\" placeholder=\"Your Email address\" value= {this.state.fields.email} onChange={this.handleChange} />\r\n\t\t\t\t{this.state.errors.email && \r\n\t\t\t\t\t<div className=\"error\">{this.state.errors.email}</div>\r\n\t\t\t\t}\r\n\t\t\t\t<label htmlFor=\"feedback\">Message</label>\r\n\t\t\t\t<textarea name=\"feedback\" className=\"message\" rows=\"4\" cols=\"10\" placeholder=\"Message\" value= {this.state.fields.feedback}\tonChange={this.handleChange} />\r\n\t\t\t\t{this.state.errors.feedback &&\r\n\t\t\t\t\t<div className=\"error\">{this.state.errors.feedback}</div>\r\n\t\t\t\t}\r\n\t\t\t\t<input type=\"submit\" className=\"button\"  value=\"SUBMIT\"/>\r\n\t\t\t\t</form>\r\n\t\t\t);\r\n\r\n}\r\n}\r\n\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Form from './Form.js';\nimport 'tachyons';\n\n\nReactDOM.render(<Form />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}